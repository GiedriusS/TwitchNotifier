#!/usr/bin/python
import library
import argparse
import time
import sys
import os


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--nick', help='Twitch nickname', default='')
    parser.add_argument('-i', '--interval', help='Interval between checks '
                        'in seconds. Default: 120', type=int, default=120)
    parser.add_argument('-n', '--online', help='Only check for online channels '
                        'a user follows', action='store_true')
    parser.add_argument('-f', '--offline', help='Only check for offline channels '
                        'a user follows', action='store_true')
    parser.add_argument('-v', '--verbose', help='Enable verbose output',
                        action='store_true')
    parser.add_argument('-u', '--user', help='Check status of only one user',
                        type=str)
    parser.add_argument('-t', '--token', help='Tokens are not needed anymore. '
                        'Option is left here for compability', type=str)
    args = parser.parse_args()
    if not args.nick and not args.user:
        print('You have to pass atleast either -c/--nick or '
              '-u/--user to TwitchNotifier!')
        sys.exit(1)
    config_dir = os.environ.get('XDG_CONFIG_HOME',
                                os.environ.get('HOME', '') + '/.config')
    if args.verbose:
        print('Configuration directory:', config_dir)

    if args.user:
        status = library.NotifyApi.check_if_online(args.user, args.verbose)
        if status is None:
            print('Error getting information about', args.user)
            sys.exit(1)
        elif status is True:
            print(args.user, 'is online')
        else:
            print(args.user, 'is offline')
        sys.exit()

    api = library.NotifyApi(args.nick, args.verbose)
    new = api.get_status()

    if args.online:
        for chan in new:
            if chan[1]:
                print(chan[0])
        del(api)
        sys.exit()

    if args.offline:
        for chan in new:
            if not chan[1] is None and not chan[1]:
                print(chan[0])
        del(api)
        sys.exit()

    old = None

    while True:
        if old and new:
            api.diff(new, old)

        time.sleep(args.interval)
        old = new
        new = api.get_status()
