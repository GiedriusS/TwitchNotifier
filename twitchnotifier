#!/usr/bin/env python3
'''
The module that does everything according to what the user wants
'''
import library
import argparse
import time
import sys
import signal
import os


def cb_sighup(signum, frame):
    '''
    A signal handler that makes TN reread the cfg file

    Parameters:
    signum - signal number
    frame - current stack frame
    '''
    API.fmt.read_file()

if __name__ == '__main__':
    PARSER = argparse.ArgumentParser()
    PARSER.add_argument('-c', '--nick', help='Twitch nickname', default='')
    PARSER.add_argument('-i', '--interval', help='Interval between checks '
                        'in seconds. Default: 120', type=int, default=120)
    PARSER.add_argument('-n', '--online', help='Only check for online channels'
                        ' a user follows', action='store_true')
    PARSER.add_argument('-f', '--offline', help='Only check for offline'
                        ' channels a user follows', action='store_true')
    PARSER.add_argument('-v', '--verbose', help='Enable verbose output',
                        action='store_true')
    PARSER.add_argument('-u', '--user', help='Check status of user(,user)',
                        type=str)
    PARSER.add_argument('-t', '--token', help='Tokens are not needed anymore. '
                        'Option is left here for compability', type=str)
    PARSER.add_argument('-l', '--logfile', help='File used for logging events '
                        'in -c/--nick mode', type=str)
    PARSER.add_argument('-g', '--config', help='Path to configuration file',
                        type=str)

    ARGS = PARSER.parse_args()
    if not ARGS.nick and not ARGS.user:
        print('You have to pass atleast either -c/--nick or '
              '-u/--user to ' + sys.argv[0] + '!')
        sys.exit(1)

    CONFIG_FILE = os.environ.get('XDG_CONFIG_HOME',
                                 os.environ.get('HOME', '') + '/.config')
    CONFIG_FILE += '/twitchnotifier.cfg'

    if ARGS.config:
        CONFIG_FILE = ARGS.config

    if ARGS.verbose:
        print('Configuration file:', CONFIG_FILE)

    FMT = library.Settings(CONFIG_FILE)
    API = library.NotifyApi(ARGS.nick, FMT, ARGS.logfile, ARGS.verbose)
    signal.signal(signal.SIGHUP, cb_sighup)

    if ARGS.user:
        LST = ARGS.user.split(',')
        RET = API.check_if_online(LST)
        if len(RET) == 0:
            del API
            sys.exit(1)
        for el in RET:
            print(el[2])
        del API
        sys.exit()

    NEW = API.get_status()

    if ARGS.online:
        for chan in NEW:
            if chan[1]:
                print(library.repl(chan[2], chan[0], API.fmt.list_entry))
        del API
        sys.exit()

    if ARGS.offline:
        for chan in NEW:
            if not chan[1] is None and not chan[1]:
                print(library.repl(chan[2], chan[0], API.fmt.list_entry_off))
        del API
        sys.exit()

    OLD = None

    while True:
        if OLD and NEW:
            API.diff(NEW, OLD)

        time.sleep(ARGS.interval)
        OLD = NEW
        NEW = API.get_status()
